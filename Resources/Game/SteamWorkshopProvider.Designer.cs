//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Resources.Game {
    using System;
    
    
    /// <summary>
    /// A strongly-typed resource class, for looking up localized strings, formatting them, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilderEx class via the ResXFileCodeGeneratorEx custom tool. (with TCAdmin modifications)
    // To add or remove a member, edit your .ResX file then rerun the ResXFileCodeGeneratorEx custom tool or rebuild your VS.NET project.
    // Copyright (c) Dmytro Kryvko 2006-2023 (http://dmytro.kryvko.googlepages.com/)
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("DMKSoftware.CodeGenerators.Tools.StronglyTypedResourceBuilderEx", "2.6.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
#if !SILVERLIGHT
    [global::System.Reflection.ObfuscationAttribute(Exclude=true, ApplyToMembers=true)]
#endif
    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
    public partial class SteamWorkshopProvider {
        
        private static string _fullClassName = "TCAdminCustomMods.Resources.Game.Resources.Game.SteamWorkshopProvider";
        
        private static global::System.Resources.ResourceManager _resourceManager;
        
        private static object _internalSyncObject;
        
        private static global::System.Globalization.CultureInfo _resourceCulture = System.Globalization.CultureInfo.InvariantCulture;
        
        /// <summary>
        /// Initializes a SteamWorkshopProvider object.
        /// </summary>
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public SteamWorkshopProvider() {
        }
        
        /// <summary>
        /// Thread safe lock object used by this class.
        /// </summary>
        public static object InternalSyncObject {
            get {
                if (object.ReferenceEquals(_internalSyncObject, null)) {
                    global::System.Threading.Interlocked.CompareExchange(ref _internalSyncObject, new object(), null);
                }
                return _internalSyncObject;
            }
        }
        
        /// <summary>
        /// Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(_resourceManager, null)) {
                    global::System.Threading.Monitor.Enter(InternalSyncObject);
                    try {
                        if (object.ReferenceEquals(_resourceManager, null)) {
                            global::System.Threading.Interlocked.Exchange(ref _resourceManager, new global::System.Resources.ResourceManager("TCAdminCustomMods.Resources.Game.SteamWorkshopProvider", typeof(SteamWorkshopProvider).Assembly));
                        }
                    }
                    finally {
                        global::System.Threading.Monitor.Exit(InternalSyncObject);
                    }
                }
                return _resourceManager;
            }
        }
        
        /// <summary>
        /// Overrides the current thread's CurrentUICulture property for all
        /// resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return _resourceCulture;
            }
            set {
                _resourceCulture = value;
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'All Content'.
        /// </summary>
        public static string AllContent {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "AllContent", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.AllContent, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'All Time'.
        /// </summary>
        public static string AllTime {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "AllTime", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.AllTime, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Batch Actions'.
        /// </summary>
        public static string BatchActions {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "BatchActions", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.BatchActions, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'By'.
        /// </summary>
        public static string By {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "By", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.By, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Collections'.
        /// </summary>
        public static string Collections {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "Collections", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.Collections, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Content type:'.
        /// </summary>
        public static string ContentType {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "ContentType", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.ContentType, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Install'.
        /// </summary>
        public static string Install {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "Install", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.Install, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Installed Content'.
        /// </summary>
        public static string InstalledContent {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "InstalledContent", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.InstalledContent, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'More Information'.
        /// </summary>
        public static string MoreInformation {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "MoreInformation", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.MoreInformation, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Most Popular'.
        /// </summary>
        public static string MostPopular {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "MostPopular", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.MostPopular, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Most Recent'.
        /// </summary>
        public static string MostRecent {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "MostRecent", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.MostRecent, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Most Subscribed'.
        /// </summary>
        public static string MostSubscribed {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "MostSubscribed", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.MostSubscribed, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'No description available.'.
        /// </summary>
        public static string NoDescriptionAvailable {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "NoDescriptionAvailable", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.NoDescriptionAvailable, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'One Week'.
        /// </summary>
        public static string OneWeek {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "OneWeek", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.OneWeek, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'One Year'.
        /// </summary>
        public static string OneYear {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "OneYear", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.OneYear, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Over time period:'.
        /// </summary>
        public static string OverTimePeriod {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "OverTimePeriod", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.OverTimePeriod, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Reinstall All'.
        /// </summary>
        public static string ReinstallAll {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "ReinstallAll", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.ReinstallAll, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Search'.
        /// </summary>
        public static string Search {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "Search", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.Search, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Six Months'.
        /// </summary>
        public static string SixMonths {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "SixMonths", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.SixMonths, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Sort by:'.
        /// </summary>
        public static string SortBy {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "SortBy", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.SortBy, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Three Months'.
        /// </summary>
        public static string ThreeMonths {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "ThreeMonths", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.ThreeMonths, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Today'.
        /// </summary>
        public static string Today {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "Today", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.Today, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Uninstall'.
        /// </summary>
        public static string Uninstall {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "Uninstall", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.Uninstall, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Uninstall All'.
        /// </summary>
        public static string UninstallAll {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "UninstallAll", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.UninstallAll, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Updatable Content'.
        /// </summary>
        public static string UpdatableContent {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "UpdatableContent", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.UpdatableContent, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Looks up a localized string similar to 'Update All'.
        /// </summary>
        public static string UpdateAll {
            get {
                string translated_text = TCAdmin.SDK.Language.LanguageManager.GetTranslatedText(System.Reflection.Assembly.GetExecutingAssembly().FullName, _fullClassName, "UpdateAll", System.Globalization.CultureInfo.CurrentCulture);
                if (object.ReferenceEquals(translated_text, null)) {
                    return ResourceManager.GetString(ResourceNames.UpdateAll, _resourceCulture);
                }
                else {
                    return translated_text;
                }
            }
        }
        
        /// <summary>
        /// Lists all the resource names as constant string fields.
        /// </summary>
        public class ResourceNames {
            
            /// <summary>
            /// Stores the resource name 'AllContent'.
            /// </summary>
            public const string AllContent = "AllContent";
            
            /// <summary>
            /// Stores the resource name 'AllTime'.
            /// </summary>
            public const string AllTime = "AllTime";
            
            /// <summary>
            /// Stores the resource name 'BatchActions'.
            /// </summary>
            public const string BatchActions = "BatchActions";
            
            /// <summary>
            /// Stores the resource name 'By'.
            /// </summary>
            public const string By = "By";
            
            /// <summary>
            /// Stores the resource name 'Collections'.
            /// </summary>
            public const string Collections = "Collections";
            
            /// <summary>
            /// Stores the resource name 'ContentType'.
            /// </summary>
            public const string ContentType = "ContentType";
            
            /// <summary>
            /// Stores the resource name 'Install'.
            /// </summary>
            public const string Install = "Install";
            
            /// <summary>
            /// Stores the resource name 'InstalledContent'.
            /// </summary>
            public const string InstalledContent = "InstalledContent";
            
            /// <summary>
            /// Stores the resource name 'MoreInformation'.
            /// </summary>
            public const string MoreInformation = "MoreInformation";
            
            /// <summary>
            /// Stores the resource name 'MostPopular'.
            /// </summary>
            public const string MostPopular = "MostPopular";
            
            /// <summary>
            /// Stores the resource name 'MostRecent'.
            /// </summary>
            public const string MostRecent = "MostRecent";
            
            /// <summary>
            /// Stores the resource name 'MostSubscribed'.
            /// </summary>
            public const string MostSubscribed = "MostSubscribed";
            
            /// <summary>
            /// Stores the resource name 'NoDescriptionAvailable'.
            /// </summary>
            public const string NoDescriptionAvailable = "NoDescriptionAvailable";
            
            /// <summary>
            /// Stores the resource name 'OneWeek'.
            /// </summary>
            public const string OneWeek = "OneWeek";
            
            /// <summary>
            /// Stores the resource name 'OneYear'.
            /// </summary>
            public const string OneYear = "OneYear";
            
            /// <summary>
            /// Stores the resource name 'OverTimePeriod'.
            /// </summary>
            public const string OverTimePeriod = "OverTimePeriod";
            
            /// <summary>
            /// Stores the resource name 'ReinstallAll'.
            /// </summary>
            public const string ReinstallAll = "ReinstallAll";
            
            /// <summary>
            /// Stores the resource name 'Search'.
            /// </summary>
            public const string Search = "Search";
            
            /// <summary>
            /// Stores the resource name 'SixMonths'.
            /// </summary>
            public const string SixMonths = "SixMonths";
            
            /// <summary>
            /// Stores the resource name 'SortBy'.
            /// </summary>
            public const string SortBy = "SortBy";
            
            /// <summary>
            /// Stores the resource name 'ThreeMonths'.
            /// </summary>
            public const string ThreeMonths = "ThreeMonths";
            
            /// <summary>
            /// Stores the resource name 'Today'.
            /// </summary>
            public const string Today = "Today";
            
            /// <summary>
            /// Stores the resource name 'Uninstall'.
            /// </summary>
            public const string Uninstall = "Uninstall";
            
            /// <summary>
            /// Stores the resource name 'UninstallAll'.
            /// </summary>
            public const string UninstallAll = "UninstallAll";
            
            /// <summary>
            /// Stores the resource name 'UpdatableContent'.
            /// </summary>
            public const string UpdatableContent = "UpdatableContent";
            
            /// <summary>
            /// Stores the resource name 'UpdateAll'.
            /// </summary>
            public const string UpdateAll = "UpdateAll";
        }
    }
}
